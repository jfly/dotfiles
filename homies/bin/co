#!/usr/bin/env python

import sys
from gitlib import parse_remote
import subprocess
from pathlib import Path
import argparse

# Subclass ArgumentParser to get help to print to stderr. This is nice because
# callers expect this script to only print a path to stdout (see the `co`
# function that calls this script).
class StdErrParser(argparse.ArgumentParser):
    def print_help(self, *args, **kwargs):
        super().print_help(*args, **kwargs, file=sys.stderr)


def main():
    parser = StdErrParser()
    parser.add_argument("remote")
    parser.add_argument('--dry-run', action='store_true', help="do nothing, just print what would happen")
    args = parser.parse_args()

    if args.dry_run:
        print("Beginning a dry run.", file=sys.stderr)
        print()

    clone(args.remote, dry_run=args.dry_run)

    if args.dry_run:
        print()
        print("Note: That was a dry run, nothing actually happened!", file=sys.stderr)

def clone(remote: str, dry_run: bool):
    heirarchy = parse_remote(remote)
    if heirarchy is None:
        assert False, f"couldn't understand {remote}"

    target = Path(Path.home(), "src").joinpath(*heirarchy)
    target.parent.mkdir(parents=True, exist_ok=True)
    if target.exists:
        print(f"I found a folder {target}, I'm going to optimistically assume it is a git repo set up for {remote}", file=sys.stderr)
        print(target)
        return

    if not dry_run:
        subprocess.check_call(['git', 'clone', remote], cwd=target.parent, stdout=subprocess.DEVNULL)
    print(target)


if __name__ == "__main__":
    main()

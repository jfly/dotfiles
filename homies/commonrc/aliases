# shellcheck shell=bash

alias bs="mosh bs336 -- bash -cli bs"
alias ls='ls --color=auto'
alias be="bundle exec"

# From http://vim.wikia.com/wiki/Ignore_white_space_in_vimdiff.
alias vimdiffw="vimdiff -c 'set diffopt+=iwhite'"

alias ssh="light_dark_ssh"

# Awesome debug script from https://unix.stackexchange.com/a/231310
# Very useful for finding short lived processes.
alias allprocs='sudo sysdig -p"*%evt.time %proc.pid %proc.ppid %evt.dir %proc.exeline"     "( evt.dir=< and evt.type=execve ) or evt.type=procexit"'

# Home network stuff
alias strider_dns_clear="ssh -l admin strider killall -s HUP dnsmasq"

function with_commit {
    (
        set -e
        _og_ref=$(git symbolic-ref HEAD 2>/dev/null) || _og_ref=$(git rev-parse --short HEAD 2>/dev/null)
        _og_ref=${_og_ref#refs/heads/}

        _commit=$1
        shift
        git checkout -b temp "$_commit"
        function _cleanup {
            git checkout "$_og_ref"
            git branch -d temp
        }
        trap _cleanup EXIT

        "$@"
    )
}

function with_time {
    (
        set -e

        # Something of the format "2020-05-23 23:26:00"
        _time_str=$1
        shift

        if ! [[ $_time_str =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
            echo 'Time string must be of the format:'
            echo '    YYYY-MM-DD HH:MM:SS'
            echo ''
            echo 'For example:'
            echo '    2020-05-23 23:26:00'
            echo ''

            exit 1
        fi

        function _cleanup {
            sudo timedatectl set-ntp 1
        }
        trap _cleanup EXIT

        sudo timedatectl set-ntp 0
        sudo timedatectl set-time "$_time_str"

        "$@"
    )
}

function pick_commit {
    glola --color=always | fzf --ansi --no-sort --reverse --multi | while read -r item; do
        echo -n "${item}" | sed 's/^[ |/\\*]*//' | awk '{printf $1" "}'
    done

    echo
}

# Honor specific stuff
function mcli {
    __database=${1:=$DEFAULT_MYSQL_DATABASE}
    shift
    mycli --user "$MYSQL_USER" --host "$MYSQL_HOST" --port "$MYSQL_PORT" "$__database" "$@"
}
function truncate_all_tables {
    query_string="SET FOREIGN_KEY_CHECKS = 0;"
    for table in $(echo 'show tables' | mcli sonasandboxdb | tail +2); do
        query_string="$query_string TRUNCATE TABLE \`$table\`; "
    done
    query_string="$query_string SET FOREIGN_KEY_CHECKS = 1;"

    echo "$query_string"
}
alias h4salt="ssh bastion ssh saltmaster sudo journalctl --follow --lines=10000 | grep pull-and-run"

# --xetex avoids huge file sizes when trimming pdfs.
# See: http://alexsleat.co.uk/2011/01/25/using-pdfcrop-to-remove-white-margins-ubuntu/
# sudo pacman -S texlive-core
alias pdfcrop="pdfcrop --xetex"

function open {
    url="$1"
    if [ -e "$url" ]; then
        DROPBOX_DIR=$(readlink -f ~/Dropbox)
        if [[ $url == "$DROPBOX_DIR"* ]]; then
            path_to_file=$(relpath "$1" "$DROPBOX_DIR")
            url="https://www.dropbox.com/home/$path_to_file"
        fi
    fi
    xdg-open "$1"
}
alias o=open

# https://stackoverflow.com/a/7305217/1739415
relpath() { python -c "import os.path; print(os.path.relpath('$1','${2:-$PWD}'))"; }

function de {
    CONTAINER=$1
    shift
    CMD="docker exec -it $CONTAINER env TERM=xterm bash"
    if [ "$#" -gt 0 ]; then
        CMD="$CMD -c '$*'"
    fi
    echo "$CMD"
    eval "$CMD"
}

function dr {
    IMAGE=$1
    shift
    CMD="docker run -it --entrypoint=bash $IMAGE"
    if [ "$#" -gt 0 ]; then
        CMD="$CMD -c '$*'"
    fi
    echo "$CMD"
    eval "$CMD"
}

# Copied from https://gist.github.com/jfly/7b94cba17c04d344d62a7bea916bb55a
function start_screen {
    function print_usage {
        echo "Usage: $0 [NAME] [title1] [cmd1] [title2] [cmd2] ..."
    }
    if test $# -eq 0; then
        print_usage >/dev/stderr
        return
    fi
    NAME=$1
    shift
    if test $(($# % 2)) -ne 0; then
        echo "You must specify an equal number of titles and commands." >/dev/stderr
        echo "" >/dev/stderr
        print_usage >/dev/stderr
        return
    fi

    screen -dmS "$NAME" -s "$SHELL" # start screen

    while test $# -gt 0; do
        TITLE="$1"
        shift
        CMD="$1"$'\n'
        shift
        screen -S "$NAME" -X title "$TITLE" # set title of window
        screen -S "$NAME" -X stuff "$CMD"   # run command in window
        if test $# -gt 0; then
            screen -S "$NAME" -X screen # add new window
        fi
    done
}

# Note: copied from start_screen above. There's got to be a clever way of sharing this logic...
function start_tmux {
    function print_usage {
        echo "Usage: $0 [NAME] [title1] [cmd1] [title2] [cmd2] ..."
    }
    if test $# -eq 0; then
        print_usage >/dev/stderr
        return
    fi
    NAME=$1
    shift
    if test $(($# % 2)) -ne 0; then
        echo "You must specify an equal number of titles and commands." >/dev/stderr
        echo "" >/dev/stderr
        print_usage >/dev/stderr
        return
    fi

    tmux new-session -d -s "$NAME" # start tmux

    while test $# -gt 0; do
        TITLE="$1"
        shift
        CMD="$1"$'\n'
        shift
        tmux rename-window -t "$NAME" "$TITLE" # set title of window
        tmux send-keys -t "$NAME" "$CMD"       # run command in window
        if test $# -gt 0; then
            tmux new-window -t "$NAME"
        fi
    done
}

function cgl {
    hub browse -u -- "commit/$1" | clipit
}

function clcl {
    cgl "$(git rev-parse HEAD)"
}

function gnb {
    if [ -z "$1" ]; then
        echo "Please specify a branch name to create." >>/dev/stderr
    else
        local stashed
        stashed=$(git stash)

        git fetch upstream
        git checkout --no-track -b "$1" upstream/master
        git push -u origin "$1"

        if [ "$stashed" != "No local changes to save" ]; then
            git stash apply
            echo "I just did a git stash apply, if things worked well, don't forget to do a 'git stash drop'"
        fi
    fi
}

function remote_to_gh_url {
    # Convert git@github.com:jfly/tnoodle.git to jfly/tnoodle
    local url
    url=${1#git@github.com:}
    url=${1%.git}

    # Convert https://github.com/thewca/tnoodle.git to thewca/tnoodle
    url=${1#https://github.com/}

    echo "$url"
}

function gnpr {
    git push
    upstream=$(remote_to_gh_url "$(git remote get-url upstream)")
    origin=$(remote_to_gh_url "$(git remote get-url origin)")
    origin_repo=${origin%/*}
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    o "https://github.com/${upstream}/compare/master...${origin_repo}:${current_branch}?expand=1"
}

alias cdk='./cdk'

co() {
    dir=$(command co "$@")
    cd "$dir"
}

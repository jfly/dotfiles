#!/usr/bin/env bash

function set_termite_colorscheme_file {
  colorscheme_file=$1
  ~/.config/termite/config.template.sh "$colorscheme_file"
}

function reload_termite_config() {
  # Termite reloads its config on SIGUSR1.
  # https://github.com/thestinger/termite/blob/3bc2a43bef9b0842cb242dd19853d0344c8a2766/termite.cc#L1715

  # First search for an ancestor termite process.
  TERMITE_PID=$(pstree -spl $$ | grep -Eo 'termite\([0-9]+\)' | grep -o '[0-9]*' | tail -1)
  if [ -z "$TERMITE_PID" ]; then
    # If there isn't an ancestor termite process, then look at the currently focused window,
    # but make sure it's a termite process and not some poor other process that we're going to
    # accidentally kill.
    TERMITE_PID=$(xdotool getwindowpid $(xdotool getwindowfocus))
    exe_name=$(basename $(readlink /proc/${TERMITE_PID}/exe))
    if [ "$exe_name" != "termite" ]; then
      echo "The currently focused window is: '${exe_name}', but I expected 'termite'"
      exit 1
    fi
  fi
  kill -s USR1 $TERMITE_PID
}

function dark() {
  set_termite_colorscheme_file "solarized-dark"
  reload_termite_config
}

function light() {
  set_termite_colorscheme_file "solarized-light"
  reload_termite_config
  set_termite_colorscheme_file "solarized-dark"
}

allowed_commands="dark light"
# From http://stackoverflow.com/a/8064551
listcontains() {
  for word in $1; do
    [[ $word = $2 ]] && return 0
  done
  return 1
}

# Validate command line arguments
print_usage_and_exit() {
  echo -n "Usage: $0 "
  for command in $allowed_commands; do
    echo -n "[$command] "
  done
  echo
  exit
}
if [ $# -lt 1 ]; then
  print_usage_and_exit
fi
for command in "$@"; do
  if ! listcontains "$allowed_commands" $command; then
    echo "Unrecognized command: $command"
    print_usage_and_exit
  fi
done

# Comands have been validated, so execute them!
# Show commands before running them.
set -e
for command in "$@"; do
  $command
done

# Allow unauthenticated connections from localhost and the local network.
# Connections from the outside must enter a password.
satisfy any;
allow 192.168.1.0/24;
allow 127.0.0.0/24;
deny all;
auth_basic "...";
auth_basic_user_file /etc/nginx/auth/root;

# These values look bogus. That's because they are. They will get filled in by
# umputun/nginx-le.
ssl_certificate SSL_CERT;
ssl_certificate_key SSL_KEY;
ssl_trusted_certificate SSL_CHAIN_CERT;

proxy_set_header X-Real-IP $remote_addr;
proxy_set_header Host $host;

# WebSocket proxying - from http://nginx.org/en/docs/http/websocket.html
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $connection_upgrade;

server {
    listen 443 ssl;

    location / {
        root /webroot;
        index index.html;
    }
}

# jflei.com is hosted by GitHub Pages, and unfortunately, we can't
# point 2 different domains at a GitHub page.
# As suggested on
# https://help.github.com/articles/setting-up-a-custom-domain-with-pages,
# I've found a "a service that can redirect the other domains
# to your Pages domain."
server {
    server_name www.tnoodle.tk tnoodle.tk;
    listen 80;
    rewrite ^ http://www.jflei.com$request_uri? permanent;
}

server {
    server_name torrents.*;
    listen 443 ssl;

    location / {
        proxy_pass http://127.0.0.1:9091;
    }
}

server {
    server_name media.*;
    listen 443 ssl;

    location / {
        root /mnt/media;
        index index.html;
        autoindex on;
    }
}

server {
    server_name sonarr.*;
    listen 443 ssl;

    location / {
        proxy_pass http://127.0.0.1:8989;
    }
}

server {
    server_name kodi.*;
    listen 443 ssl;

    location / {
        proxy_pass http://dallben:8080;
    }
}
# Some hackiness to get Kodi's Chorus2's web ui working with websockets.
# The UI is hardcoded to use port 9090 for websockets:
#  https://github.com/xbmc/chorus2/blob/f9f376930fd544e86b1dd3c0dc5f8999031d73c5/src/js/app.coffee#L8
# Here we terminate the incoming ssl (wss://) connection, and forward the connection unencrypted to the real kodi box.
# Note that we've also configured our router to forward external connections to
# port 9090 to clark:9090 (http://strider.snowdon.jflei.com/Advanced_VirtualServer_Content.asp).
# I really don't think it should be this difficult. I don't understand why a separate port is even necessary.
# Hopefully a better solution shows up on https://github.com/xbmc/chorus2/issues/133 someday.
server {
    server_name kodi.*;
    listen 9090 ssl;

    location / {
        proxy_pass http://dallben:9090;
    }
}

server {
    server_name home-assistant.*;
    listen 443 ssl;

    location / {
        # This is ok because home-assistant has its own authentication system.
        satisfy any;
        allow all;
        auth_basic off;
        proxy_pass http://127.0.0.1:8123;
    }
}

server {
    server_name lloyd.*;
    listen 443 ssl;

    location / {
        // Downgrade the proxied request from HTTP 1.1 to 1.0. The upstream
        // (xerox) HTTP server responds with HTTP 100 Continue's, and nginx
        // doesn't seem to play nicely with that. Downgrading to 1.0 prevents
        // the server from doing anything with Continue's. See
        // https://forum.nginx.org/read.php?2,241130,241139 for more details.
        proxy_http_version 1.0;
        proxy_pass https://lloyd;
    }
}
